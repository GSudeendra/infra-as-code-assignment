name: deploy-infrastructure-pipeline

on:
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read
  pull-requests: read
  actions: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ROLE_ARN: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/iac-github-actions-role-dev

jobs:
  deploy-remote-state:
    name: deploy-remote-state
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: RemoteStateSession
          role-duration-seconds: 1800
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.5.0"
      - name: Terraform Init (remote-state)
        run: |
          cd infra/backend
          terraform init
      - name: Terraform Validate (remote-state)
        run: |
          cd infra/backend
          terraform validate
      - name: Terraform Apply (remote-state)
        run: |
          cd infra/backend
          terraform apply -auto-approve
      - name: Save remote state outputs
        run: |
          cd infra/backend
          terraform output -raw s3_bucket_name > s3_bucket_name.txt
          terraform output -raw dynamodb_table_name > dynamodb_table_name.txt
      - name: Upload Outputs
        uses: actions/upload-artifact@v4
        with:
          name: remote-state-outputs
          path: |
            infra/backend/s3_bucket_name.txt
            infra/backend/dynamodb_table_name.txt

  deploy-main-infra:
    name: deploy-main-infra
    runs-on: ubuntu-latest
    needs: [deploy-remote-state]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Remote State Outputs
        uses: actions/download-artifact@v4
        with:
          name: remote-state-outputs
          path: remote-state-outputs
      - name: Read Output Files into ENV
        run: |
          echo "S3_BUCKET=$(cat remote-state-outputs/s3_bucket_name.txt)" >> $GITHUB_ENV
          echo "DYNAMO_TABLE=$(cat remote-state-outputs/dynamodb_table_name.txt)" >> $GITHUB_ENV
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: MainInfraSession
          role-duration-seconds: 1800
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.5.0"
      - name: Terraform Init (main)
        run: |
          cd infra
          region="${AWS_REGION:-us-east-1}"
          terraform init \
            -backend-config="bucket=${S3_BUCKET}" \
            -backend-config="dynamodb_table=${DYNAMO_TABLE}" \
            -backend-config="region=${region}"
      - name: Terraform Validate (main)
        run: |
          cd infra
          terraform validate
      - name: Terraform Apply (main)
        run: |
          cd infra
          terraform apply -auto-approve
      - name: Get API Gateway URL
        run: |
          cd infra
          terraform output -raw api_gateway_url > ../api_gateway_url.txt
      - name: Terraform Format Check
        run: |
          cd infra
          terraform fmt -check -recursive
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: v0.47.0
      - name: Init TFLint Plugins
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: tflint --init
      - name: Run TFLint
        run: |
          tflint --format compact --chdir=infra
      - name: Set up Python for Security Tools
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install Security Scanning Tools
        run: |
          pip install checkov tfsec
          mkdir -p reports
      - name: Run Checkov
        run: |
          checkov -d . --framework terraform --output cli --output sarif --output-file-path reports/checkov-results.sarif --quiet
        continue-on-error: true
      - name: Run tfsec
        run: |
          tfsec . --format sarif --out reports/tfsec-results.sarif
        continue-on-error: true
      - name: Upload Checkov SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/checkov-results.sarif
          category: checkov
          wait-for-processing: true
      - name: Upload tfsec SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/tfsec-results.sarif
          category: tfsec
          wait-for-processing: true
      - name: Set up Python for Tests
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: 'pip'
      - name: Install Test Dependencies
        run: |
          cd tests
          pip install -r requirements.txt
      - name: Announce API Test
        run: |
          echo "Running automated tests against deployed API Gateway at $(cat ../api_gateway_url.txt)"
      - name: Run Functional Tests
        run: |
          cd tests
          export API_GATEWAY_URL=$(cat ../api_gateway_url.txt)
          python -m pytest -v --junitxml=test-results.xml
        timeout-minutes: 5
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tests/test-results.xml
      - name: Setup Terraform docs
        uses: terraform-docs/gh-actions@v1.0.0
        with:
          output-file: TERRAFORM_DOCS.md
          output-method: replace
          git-push: false
          working-dir: infra
      - name: Generate Module Documentation
        run: |
          echo "## Module Documentation" > MODULE_DOCS.md
          for module in $(ls -d infra/modules/*); do
            if [ -d "$module" ]; then
              module_name=$(basename $module)
              echo "### Module: $module_name" >> MODULE_DOCS.md
              echo "\`\`\`" >> MODULE_DOCS.md
              terraform-docs markdown table $module >> MODULE_DOCS.md
              echo "\`\`\`" >> MODULE_DOCS.md
              echo "" >> MODULE_DOCS.md
            fi
          done
      - name: Combine Documentation
        run: |
          cat TERRAFORM_DOCS.md MODULE_DOCS.md > INFRASTRUCTURE_DOCS.md
          echo "## Infrastructure Diagram" >> INFRASTRUCTURE_DOCS.md
          echo "![Architecture Diagram](./docs/architecture-diagram.png)" >> INFRASTRUCTURE_DOCS.md
      - name: Upload Documentation
        uses: actions/upload-artifact@v4
        with:
          name: terraform-documentation
          path: |
            TERRAFORM_DOCS.md
            MODULE_DOCS.md
            INFRASTRUCTURE_DOCS.md
