name: Deploy Infrastructure Pipeline

on:
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read
  pull-requests: read
  actions: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ROLE_ARN: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/github-actions-oidc-role
  TERRAFORM_EXECUTION_ROLE_NAME: ${{ vars.TERRAFORM_EXECUTION_ROLE_NAME }}

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    steps:
      # Checkout repository code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Configure AWS credentials for GitHub Actions OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: DeploySession
          role-duration-seconds: 1800

      # Set up Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.5.0"

      # Ensure deploy.sh is executable and run deployment
      - name: Deploy Infrastructure via Script
        run: |
          chmod +x scripts/deployment/deploy.sh
          bash scripts/deployment/deploy.sh

      # Set up Python for functional API tests
      - name: Set Up Python for Functional Tests
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: 'pip'

      # Install test dependencies
      - name: Install Test Dependencies
        run: |
          cd tests
          pip install -r requirements.txt

      # Run functional API tests using pytest
      - name: Run Functional API Tests
        run: |
          cd tests
          # If API_GATEWAY_URL is output by deploy.sh, read it from a known location or output file
          if [ -f ../api_gateway_url.txt ]; then
            export API_GATEWAY_URL=$(cat ../api_gateway_url.txt)
          fi
          python -m pytest -v --junitxml=test-results.xml
        timeout-minutes: 5

      # Upload test results as an artifact
      - name: Upload Functional Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: functional-test-results
          path: tests/test-results.xml

      # Generate Terraform documentation for root and modules
      - name: Generate Terraform Documentation
        uses: terraform-docs/gh-actions@v1.0.0
        with:
          output-file: TERRAFORM_DOCS.md
          output-method: replace
          git-push: false
          working-dir: infra

      - name: Generate Module Documentation
        run: |
          echo "## Module Documentation" > MODULE_DOCS.md
          for module in $(ls -d infra/modules/*); do
            if [ -d "$module" ]; then
              module_name=$(basename $module)
              echo "### Module: $module_name" >> MODULE_DOCS.md
              echo "\`\`\`" >> MODULE_DOCS.md
              terraform-docs markdown table $module >> MODULE_DOCS.md
              echo "\`\`\`" >> MODULE_DOCS.md
              echo "" >> MODULE_DOCS.md
            fi
          done

      # Combine all documentation and add architecture diagram
      - name: Combine and Finalize Documentation
        run: |
          cat TERRAFORM_DOCS.md MODULE_DOCS.md > INFRASTRUCTURE_DOCS.md
          echo "## Infrastructure Diagram" >> INFRASTRUCTURE_DOCS.md
          echo "![Architecture Diagram](./docs/architecture-diagram.png)" >> INFRASTRUCTURE_DOCS.md

      # Upload documentation as an artifact
      - name: Upload Terraform Documentation
        uses: actions/upload-artifact@v4
        with:
          name: terraform-documentation
          path: |
            TERRAFORM_DOCS.md
            MODULE_DOCS.md
            INFRASTRUCTURE_DOCS.md
